/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/tutorial_java_projects.html
 */

plugins {
	// Apply the java plugin to add support for Java
	id 'java'
	id 'java-library'

	// Apply the application plugin to add support for building a CLI application.
	// id 'application'
	id 'maven-publish'
}

repositories {
	mavenCentral()
	google()
	flatDir {
		dirs 'lib'
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

group = 'com.github.walfram'

ext {
	jmev = '3.6.0-stable'
}

dependencies {
	api 'com.google.guava:guava:30.0-jre'

	api 'ch.qos.logback:logback-classic:1.2.9'
	api 'com.fasterxml.jackson.core:jackson-databind:2.12.7.1'
	api 'org.reflections:reflections:0.9.12'

	api 'com.github.stephengold:Heart:7.1.0'

	api 'com.simsilica:sio2:1.6.0'

	api 'org.codehaus.groovy:groovy-all:3.0.7'
	api 'com.simsilica:lemur:1.15.0'
	api 'com.simsilica:lemur-proto:1.12.0'
	api 'com.simsilica:lemur-props:1.1.1'

	api "org.jmonkeyengine:jme3-core:$jmev"
	api "org.jmonkeyengine:jme3-desktop:$jmev"
	api "org.jmonkeyengine:jme3-lwjgl3:$jmev"
	api "org.jmonkeyengine:jme3-effects:$jmev"
	api "org.jmonkeyengine:jme3-plugins:$jmev"

	api "org.jmonkeyengine:jme3-testdata:$jmev"

	testImplementation(platform('org.junit:junit-bom:5.7.0'))
	testImplementation('org.junit.jupiter:junit-jupiter')
}

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

jar {
	//	manifest {
	//		attributes (
	//			'Class-Path': configurations.compile.collect {it.getName()}.join(' '),
	//			'Main-Class': 'com.test.MainClassName'
	//		)
	//	}
	//	from {
	//		configurations.runtimeClasspath.collect {it.isDirectory() ? it : zipTree(it) }
	//	}

	//	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

//application {
//    mainClassName = 'sandbox.common.App'
//}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}